                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.0 #14620 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module preemptive
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _myTimer0Handler
                                     12 	.globl _Bootstrap
                                     13 	.globl _main
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl _ProductionFlag
                                    111 	.globl _newSP
                                    112 	.globl _tempSP
                                    113 	.globl _curThreadID
                                    114 	.globl _ValidBitMap
                                    115 	.globl _ProdThreadID
                                    116 	.globl _newThreadID
                                    117 	.globl _Pointer
                                    118 	.globl _ThreadCreate
                                    119 	.globl _ThreadYield
                                    120 	.globl _ThreadExit
                                    121 ;--------------------------------------------------------
                                    122 ; special function registers
                                    123 ;--------------------------------------------------------
                                    124 	.area RSEG    (ABS,DATA)
      000000                        125 	.org 0x0000
                           000080   126 _P0	=	0x0080
                           000081   127 _SP	=	0x0081
                           000082   128 _DPL	=	0x0082
                           000083   129 _DPH	=	0x0083
                           000087   130 _PCON	=	0x0087
                           000088   131 _TCON	=	0x0088
                           000089   132 _TMOD	=	0x0089
                           00008A   133 _TL0	=	0x008a
                           00008B   134 _TL1	=	0x008b
                           00008C   135 _TH0	=	0x008c
                           00008D   136 _TH1	=	0x008d
                           000090   137 _P1	=	0x0090
                           000098   138 _SCON	=	0x0098
                           000099   139 _SBUF	=	0x0099
                           0000A0   140 _P2	=	0x00a0
                           0000A8   141 _IE	=	0x00a8
                           0000B0   142 _P3	=	0x00b0
                           0000B8   143 _IP	=	0x00b8
                           0000D0   144 _PSW	=	0x00d0
                           0000E0   145 _ACC	=	0x00e0
                           0000F0   146 _B	=	0x00f0
                                    147 ;--------------------------------------------------------
                                    148 ; special function bits
                                    149 ;--------------------------------------------------------
                                    150 	.area RSEG    (ABS,DATA)
      000000                        151 	.org 0x0000
                           000080   152 _P0_0	=	0x0080
                           000081   153 _P0_1	=	0x0081
                           000082   154 _P0_2	=	0x0082
                           000083   155 _P0_3	=	0x0083
                           000084   156 _P0_4	=	0x0084
                           000085   157 _P0_5	=	0x0085
                           000086   158 _P0_6	=	0x0086
                           000087   159 _P0_7	=	0x0087
                           000088   160 _IT0	=	0x0088
                           000089   161 _IE0	=	0x0089
                           00008A   162 _IT1	=	0x008a
                           00008B   163 _IE1	=	0x008b
                           00008C   164 _TR0	=	0x008c
                           00008D   165 _TF0	=	0x008d
                           00008E   166 _TR1	=	0x008e
                           00008F   167 _TF1	=	0x008f
                           000090   168 _P1_0	=	0x0090
                           000091   169 _P1_1	=	0x0091
                           000092   170 _P1_2	=	0x0092
                           000093   171 _P1_3	=	0x0093
                           000094   172 _P1_4	=	0x0094
                           000095   173 _P1_5	=	0x0095
                           000096   174 _P1_6	=	0x0096
                           000097   175 _P1_7	=	0x0097
                           000098   176 _RI	=	0x0098
                           000099   177 _TI	=	0x0099
                           00009A   178 _RB8	=	0x009a
                           00009B   179 _TB8	=	0x009b
                           00009C   180 _REN	=	0x009c
                           00009D   181 _SM2	=	0x009d
                           00009E   182 _SM1	=	0x009e
                           00009F   183 _SM0	=	0x009f
                           0000A0   184 _P2_0	=	0x00a0
                           0000A1   185 _P2_1	=	0x00a1
                           0000A2   186 _P2_2	=	0x00a2
                           0000A3   187 _P2_3	=	0x00a3
                           0000A4   188 _P2_4	=	0x00a4
                           0000A5   189 _P2_5	=	0x00a5
                           0000A6   190 _P2_6	=	0x00a6
                           0000A7   191 _P2_7	=	0x00a7
                           0000A8   192 _EX0	=	0x00a8
                           0000A9   193 _ET0	=	0x00a9
                           0000AA   194 _EX1	=	0x00aa
                           0000AB   195 _ET1	=	0x00ab
                           0000AC   196 _ES	=	0x00ac
                           0000AF   197 _EA	=	0x00af
                           0000B0   198 _P3_0	=	0x00b0
                           0000B1   199 _P3_1	=	0x00b1
                           0000B2   200 _P3_2	=	0x00b2
                           0000B3   201 _P3_3	=	0x00b3
                           0000B4   202 _P3_4	=	0x00b4
                           0000B5   203 _P3_5	=	0x00b5
                           0000B6   204 _P3_6	=	0x00b6
                           0000B7   205 _P3_7	=	0x00b7
                           0000B0   206 _RXD	=	0x00b0
                           0000B1   207 _TXD	=	0x00b1
                           0000B2   208 _INT0	=	0x00b2
                           0000B3   209 _INT1	=	0x00b3
                           0000B4   210 _T0	=	0x00b4
                           0000B5   211 _T1	=	0x00b5
                           0000B6   212 _WR	=	0x00b6
                           0000B7   213 _RD	=	0x00b7
                           0000B8   214 _PX0	=	0x00b8
                           0000B9   215 _PT0	=	0x00b9
                           0000BA   216 _PX1	=	0x00ba
                           0000BB   217 _PT1	=	0x00bb
                           0000BC   218 _PS	=	0x00bc
                           0000D0   219 _P	=	0x00d0
                           0000D1   220 _F1	=	0x00d1
                           0000D2   221 _OV	=	0x00d2
                           0000D3   222 _RS0	=	0x00d3
                           0000D4   223 _RS1	=	0x00d4
                           0000D5   224 _F0	=	0x00d5
                           0000D6   225 _AC	=	0x00d6
                           0000D7   226 _CY	=	0x00d7
                                    227 ;--------------------------------------------------------
                                    228 ; overlayable register banks
                                    229 ;--------------------------------------------------------
                                    230 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        231 	.ds 8
                                    232 ;--------------------------------------------------------
                                    233 ; internal ram data
                                    234 ;--------------------------------------------------------
                                    235 	.area DSEG    (DATA)
                           000030   236 _Pointer	=	0x0030
                           00003C   237 _newThreadID	=	0x003c
                           000028   238 _ProdThreadID	=	0x0028
                           000034   239 _ValidBitMap	=	0x0034
                           000021   240 _curThreadID	=	0x0021
                           000022   241 _tempSP	=	0x0022
                           000023   242 _newSP	=	0x0023
                           000024   243 _ProductionFlag	=	0x0024
                                    244 ;--------------------------------------------------------
                                    245 ; overlayable items in internal ram
                                    246 ;--------------------------------------------------------
                                    247 	.area	OSEG    (OVR,DATA)
                                    248 ;--------------------------------------------------------
                                    249 ; indirectly addressable internal ram data
                                    250 ;--------------------------------------------------------
                                    251 	.area ISEG    (DATA)
                                    252 ;--------------------------------------------------------
                                    253 ; absolute internal ram data
                                    254 ;--------------------------------------------------------
                                    255 	.area IABS    (ABS,DATA)
                                    256 	.area IABS    (ABS,DATA)
                                    257 ;--------------------------------------------------------
                                    258 ; bit data
                                    259 ;--------------------------------------------------------
                                    260 	.area BSEG    (BIT)
                                    261 ;--------------------------------------------------------
                                    262 ; paged external ram data
                                    263 ;--------------------------------------------------------
                                    264 	.area PSEG    (PAG,XDATA)
                                    265 ;--------------------------------------------------------
                                    266 ; uninitialized external ram data
                                    267 ;--------------------------------------------------------
                                    268 	.area XSEG    (XDATA)
                                    269 ;--------------------------------------------------------
                                    270 ; absolute external ram data
                                    271 ;--------------------------------------------------------
                                    272 	.area XABS    (ABS,XDATA)
                                    273 ;--------------------------------------------------------
                                    274 ; initialized external ram data
                                    275 ;--------------------------------------------------------
                                    276 	.area XISEG   (XDATA)
                                    277 	.area HOME    (CODE)
                                    278 	.area GSINIT0 (CODE)
                                    279 	.area GSINIT1 (CODE)
                                    280 	.area GSINIT2 (CODE)
                                    281 	.area GSINIT3 (CODE)
                                    282 	.area GSINIT4 (CODE)
                                    283 	.area GSINIT5 (CODE)
                                    284 	.area GSINIT  (CODE)
                                    285 	.area GSFINAL (CODE)
                                    286 	.area CSEG    (CODE)
                                    287 ;--------------------------------------------------------
                                    288 ; global & static initialisations
                                    289 ;--------------------------------------------------------
                                    290 	.area HOME    (CODE)
                                    291 	.area GSINIT  (CODE)
                                    292 	.area GSFINAL (CODE)
                                    293 	.area GSINIT  (CODE)
                                    294 ;--------------------------------------------------------
                                    295 ; Home
                                    296 ;--------------------------------------------------------
                                    297 	.area HOME    (CODE)
                                    298 	.area HOME    (CODE)
                                    299 ;--------------------------------------------------------
                                    300 ; code
                                    301 ;--------------------------------------------------------
                                    302 	.area CSEG    (CODE)
                                    303 ;------------------------------------------------------------
                                    304 ;Allocation info for local variables in function 'Bootstrap'
                                    305 ;------------------------------------------------------------
                                    306 ;	preemptive.c:120: void Bootstrap(void)
                                    307 ;	-----------------------------------------
                                    308 ;	 function Bootstrap
                                    309 ;	-----------------------------------------
      000000                        310 _Bootstrap:
                           000007   311 	ar7 = 0x07
                           000006   312 	ar6 = 0x06
                           000005   313 	ar5 = 0x05
                           000004   314 	ar4 = 0x04
                           000003   315 	ar3 = 0x03
                           000002   316 	ar2 = 0x02
                           000001   317 	ar1 = 0x01
                           000000   318 	ar0 = 0x00
                                    319 ;	preemptive.c:135: ValidBitMap = 0b0000;
      000000 E4               [12]  320 	clr	a
      000001 F5 34            [12]  321 	mov	_ValidBitMap,a
      000003 F5 35            [12]  322 	mov	(_ValidBitMap + 1),a
                                    323 ;	preemptive.c:136: Pointer[0] = 0x3F;
      000005 75 30 3F         [24]  324 	mov	_Pointer,#0x3f
                                    325 ;	preemptive.c:137: Pointer[1] = 0x4F;
      000008 75 31 4F         [24]  326 	mov	(_Pointer + 0x0001),#0x4f
                                    327 ;	preemptive.c:138: Pointer[2] = 0x5F;
      00000B 75 32 5F         [24]  328 	mov	(_Pointer + 0x0002),#0x5f
                                    329 ;	preemptive.c:139: Pointer[3] = 0x6F;
      00000E 75 33 6F         [24]  330 	mov	(_Pointer + 0x0003),#0x6f
                                    331 ;	preemptive.c:140: TMOD = 0; //timer zero
      000011 F5 89            [12]  332 	mov	_TMOD,a
                                    333 ;	preemptive.c:141: IE = 0x82; 
      000013 75 A8 82         [24]  334 	mov	_IE,#0x82
                                    335 ;	preemptive.c:142: TR0 = 1;
                                    336 ;	assignBit
      000016 D2 8C            [12]  337 	setb	_TR0
                                    338 ;	preemptive.c:143: ProdThreadID = '1';
      000018 75 28 31         [24]  339 	mov	_ProdThreadID,#0x31
                                    340 ;	preemptive.c:144: curThreadID = ThreadCreate(main);
      00001B 90r00r00         [24]  341 	mov	dptr,#_main
      00001E 12r00r57         [24]  342 	lcall	_ThreadCreate
      000021 85 82 21         [24]  343 	mov	_curThreadID,dpl
                                    344 ;	preemptive.c:145: RESTORESTATE;
      000024 AF 21            [24]  345 	mov	r7,_curThreadID
      000026 BF 30 02         [24]  346 	cjne	r7,#0x30,00133$
      000029 80 0F            [24]  347 	sjmp	00101$
      00002B                        348 00133$:
      00002B BF 31 02         [24]  349 	cjne	r7,#0x31,00134$
      00002E 80 0F            [24]  350 	sjmp	00102$
      000030                        351 00134$:
      000030 BF 32 02         [24]  352 	cjne	r7,#0x32,00135$
      000033 80 0F            [24]  353 	sjmp	00103$
      000035                        354 00135$:
      000035 BF 33 14         [24]  355 	cjne	r7,#0x33,00106$
      000038 80 0F            [24]  356 	sjmp	00104$
      00003A                        357 00101$:
      00003A 85 30 81         [24]  358 	mov	_SP,_Pointer
      00003D 80 0D            [24]  359 	sjmp	00106$
      00003F                        360 00102$:
      00003F 85 31 81         [24]  361 	mov	_SP,(_Pointer + 0x0001)
      000042 80 08            [24]  362 	sjmp	00106$
      000044                        363 00103$:
      000044 85 32 81         [24]  364 	mov	_SP,(_Pointer + 0x0002)
      000047 80 03            [24]  365 	sjmp	00106$
      000049                        366 00104$:
      000049 85 33 81         [24]  367 	mov	_SP,(_Pointer + 0x0003)
      00004C                        368 00106$:
      00004C D0 D0            [24]  369 	POP PSW 
      00004E D0 83            [24]  370 	POP DPH 
      000050 D0 82            [24]  371 	POP DPL 
      000052 D0 F0            [24]  372 	POP B 
      000054 D0 E0            [24]  373 	POP ACC 
                                    374 ;	preemptive.c:146: }
      000056 22               [24]  375 	ret
                                    376 ;------------------------------------------------------------
                                    377 ;Allocation info for local variables in function 'ThreadCreate'
                                    378 ;------------------------------------------------------------
                                    379 ;fp                        Allocated to registers 
                                    380 ;------------------------------------------------------------
                                    381 ;	preemptive.c:154: ThreadID ThreadCreate(FunctionPtr fp)
                                    382 ;	-----------------------------------------
                                    383 ;	 function ThreadCreate
                                    384 ;	-----------------------------------------
      000057                        385 _ThreadCreate:
                                    386 ;	preemptive.c:201: EA = 0;
                                    387 ;	assignBit
      000057 C2 AF            [12]  388 	clr	_EA
                                    389 ;	preemptive.c:203: if ((ValidBitMap & 0b1111) == 0b1111) {
      000059 74 0F            [12]  390 	mov	a,#0x0f
      00005B 55 34            [12]  391 	anl	a,_ValidBitMap
      00005D FE               [12]  392 	mov	r6,a
      00005E E5 35            [12]  393 	mov	a,(_ValidBitMap + 1)
      000060 7F 00            [12]  394 	mov	r7,#0x00
      000062 BE 0F 07         [24]  395 	cjne	r6,#0x0f,00102$
      000065 BF 00 04         [24]  396 	cjne	r7,#0x00,00102$
                                    397 ;	preemptive.c:204: return -1;
      000068 75 82 FF         [24]  398 	mov	dpl, #0xff
      00006B 22               [24]  399 	ret
      00006C                        400 00102$:
                                    401 ;	preemptive.c:207: if ((ValidBitMap & 0b0001) == 0b0000) {
      00006C E5 34            [12]  402 	mov	a,_ValidBitMap
      00006E 20 E0 0D         [24]  403 	jb	acc.0,00112$
                                    404 ;	preemptive.c:208: newThreadID = '0';
      000071 75 3C 30         [24]  405 	mov	_newThreadID,#0x30
                                    406 ;	preemptive.c:209: ValidBitMap |= 0b0001;
      000074 43 34 01         [24]  407 	orl	_ValidBitMap,#0x01
      000077 E5 35            [12]  408 	mov	a,(_ValidBitMap + 1)
                                    409 ;	preemptive.c:210: newSP =  Pointer[0];
      000079 85 30 23         [24]  410 	mov	_newSP,_Pointer
      00007C 80 34            [24]  411 	sjmp	00113$
      00007E                        412 00112$:
                                    413 ;	preemptive.c:212: else if ((ValidBitMap & 0b0010) == 0b0000) {
      00007E E5 34            [12]  414 	mov	a,_ValidBitMap
      000080 20 E1 0D         [24]  415 	jb	acc.1,00109$
                                    416 ;	preemptive.c:213: newThreadID = '1';
      000083 75 3C 31         [24]  417 	mov	_newThreadID,#0x31
                                    418 ;	preemptive.c:214: ValidBitMap |= 0b0010;
      000086 43 34 02         [24]  419 	orl	_ValidBitMap,#0x02
      000089 E5 35            [12]  420 	mov	a,(_ValidBitMap + 1)
                                    421 ;	preemptive.c:215: newSP =  Pointer[1];
      00008B 85 31 23         [24]  422 	mov	_newSP,(_Pointer + 0x0001)
      00008E 80 22            [24]  423 	sjmp	00113$
      000090                        424 00109$:
                                    425 ;	preemptive.c:217: else if ((ValidBitMap & 0b1000) == 0b0000) {
      000090 E5 34            [12]  426 	mov	a,_ValidBitMap
      000092 20 E3 0D         [24]  427 	jb	acc.3,00106$
                                    428 ;	preemptive.c:218: newThreadID = '2';
      000095 75 3C 32         [24]  429 	mov	_newThreadID,#0x32
                                    430 ;	preemptive.c:219: ValidBitMap |= 0b0100;
      000098 43 34 04         [24]  431 	orl	_ValidBitMap,#0x04
      00009B E5 35            [12]  432 	mov	a,(_ValidBitMap + 1)
                                    433 ;	preemptive.c:220: newSP =  Pointer[2];
      00009D 85 32 23         [24]  434 	mov	_newSP,(_Pointer + 0x0002)
      0000A0 80 10            [24]  435 	sjmp	00113$
      0000A2                        436 00106$:
                                    437 ;	preemptive.c:222: else if ((ValidBitMap & 0b1000) == 0b0000) {
      0000A2 E5 34            [12]  438 	mov	a,_ValidBitMap
      0000A4 20 E3 0B         [24]  439 	jb	acc.3,00113$
                                    440 ;	preemptive.c:223: newThreadID = '3';
      0000A7 75 3C 33         [24]  441 	mov	_newThreadID,#0x33
                                    442 ;	preemptive.c:224: ValidBitMap |= 0b1000;
      0000AA 43 34 08         [24]  443 	orl	_ValidBitMap,#0x08
      0000AD E5 35            [12]  444 	mov	a,(_ValidBitMap + 1)
                                    445 ;	preemptive.c:225: newSP =  Pointer[3];
      0000AF 85 33 23         [24]  446 	mov	_newSP,(_Pointer + 0x0003)
      0000B2                        447 00113$:
                                    448 ;	preemptive.c:238: __endasm;
      0000B2 85 81 22         [24]  449 	MOV	0x22, SP
      0000B5 85 23 81         [24]  450 	MOV	SP, 0x23
      0000B8 C0 82            [24]  451 	PUSH	DPL
      0000BA C0 83            [24]  452 	PUSH	DPH
      0000BC E5 00            [12]  453 	MOV	A, 0x00
      0000BE C0 E0            [24]  454 	PUSH	A
      0000C0 C0 E0            [24]  455 	PUSH	A
      0000C2 C0 E0            [24]  456 	PUSH	A
      0000C4 C0 E0            [24]  457 	PUSH	A
                                    458 ;	preemptive.c:240: switch (newThreadID) {
      0000C6 AF 3C            [24]  459 	mov	r7,_newThreadID
      0000C8 BF 30 02         [24]  460 	cjne	r7,#0x30,00182$
      0000CB 80 0F            [24]  461 	sjmp	00114$
      0000CD                        462 00182$:
      0000CD BF 31 02         [24]  463 	cjne	r7,#0x31,00183$
      0000D0 80 14            [24]  464 	sjmp	00115$
      0000D2                        465 00183$:
      0000D2 BF 32 02         [24]  466 	cjne	r7,#0x32,00184$
      0000D5 80 19            [24]  467 	sjmp	00116$
      0000D7                        468 00184$:
                                    469 ;	preemptive.c:241: case '0':
      0000D7 BF 33 28         [24]  470 	cjne	r7,#0x33,00119$
      0000DA 80 1E            [24]  471 	sjmp	00117$
      0000DC                        472 00114$:
                                    473 ;	preemptive.c:242: PSW = 0b00000000;               
      0000DC 75 D0 00         [24]  474 	mov	_PSW,#0x00
                                    475 ;	preemptive.c:246: __endasm;
      0000DF C0 D0            [24]  476 	PUSH	PSW
      0000E1 85 81 30         [24]  477 	MOV	0x30, SP
                                    478 ;	preemptive.c:247: break;
                                    479 ;	preemptive.c:248: case '1':
      0000E4 80 1C            [24]  480 	sjmp	00119$
      0000E6                        481 00115$:
                                    482 ;	preemptive.c:249: PSW = 0b00001000;
      0000E6 75 D0 08         [24]  483 	mov	_PSW,#0x08
                                    484 ;	preemptive.c:253: __endasm;
      0000E9 C0 D0            [24]  485 	PUSH	PSW
      0000EB 85 81 31         [24]  486 	MOV	0x31, SP
                                    487 ;	preemptive.c:254: break;
                                    488 ;	preemptive.c:255: case '2':
      0000EE 80 12            [24]  489 	sjmp	00119$
      0000F0                        490 00116$:
                                    491 ;	preemptive.c:256: PSW = 0b00010000;
      0000F0 75 D0 10         [24]  492 	mov	_PSW,#0x10
                                    493 ;	preemptive.c:260: __endasm;
      0000F3 C0 D0            [24]  494 	PUSH	PSW
      0000F5 85 81 32         [24]  495 	MOV	0x32, SP
                                    496 ;	preemptive.c:261: break;
                                    497 ;	preemptive.c:262: case '3':
      0000F8 80 08            [24]  498 	sjmp	00119$
      0000FA                        499 00117$:
                                    500 ;	preemptive.c:263: PSW = 0b00011000;
      0000FA 75 D0 18         [24]  501 	mov	_PSW,#0x18
                                    502 ;	preemptive.c:267: __endasm;
      0000FD C0 D0            [24]  503 	PUSH	PSW
      0000FF 85 81 33         [24]  504 	MOV	0x33, SP
                                    505 ;	preemptive.c:271: }
      000102                        506 00119$:
                                    507 ;	preemptive.c:273: SP = tempSP;
      000102 85 22 81         [24]  508 	mov	_SP,_tempSP
                                    509 ;	preemptive.c:275: EA = 1;
                                    510 ;	assignBit
      000105 D2 AF            [12]  511 	setb	_EA
                                    512 ;	preemptive.c:277: return newThreadID;
      000107 85 3C 82         [24]  513 	mov	dpl, _newThreadID
                                    514 ;	preemptive.c:278: }
      00010A 22               [24]  515 	ret
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'ThreadYield'
                                    518 ;------------------------------------------------------------
                                    519 ;	preemptive.c:287: void ThreadYield(void)
                                    520 ;	-----------------------------------------
                                    521 ;	 function ThreadYield
                                    522 ;	-----------------------------------------
      00010B                        523 _ThreadYield:
      00010B D3               [12]  524 	setb	c
      00010C 10 AF 01         [24]  525 	jbc	ea,00235$
      00010F C3               [12]  526 	clr	c
      000110                        527 00235$:
      000110 C0 D0            [24]  528 	push	psw
                                    529 ;	preemptive.c:289: SAVESTATE;
      000112 C0 E0            [24]  530 	PUSH ACC 
      000114 C0 F0            [24]  531 	PUSH B 
      000116 C0 82            [24]  532 	PUSH DPL 
      000118 C0 83            [24]  533 	PUSH DPH 
      00011A C0 D0            [24]  534 	PUSH PSW 
      00011C AF 21            [24]  535 	mov	r7,_curThreadID
      00011E BF 30 02         [24]  536 	cjne	r7,#0x30,00236$
      000121 80 0F            [24]  537 	sjmp	00101$
      000123                        538 00236$:
      000123 BF 31 02         [24]  539 	cjne	r7,#0x31,00237$
      000126 80 0F            [24]  540 	sjmp	00102$
      000128                        541 00237$:
      000128 BF 32 02         [24]  542 	cjne	r7,#0x32,00238$
      00012B 80 0F            [24]  543 	sjmp	00103$
      00012D                        544 00238$:
      00012D BF 33 14         [24]  545 	cjne	r7,#0x33,00120$
      000130 80 0F            [24]  546 	sjmp	00104$
      000132                        547 00101$:
      000132 85 81 30         [24]  548 	MOV 0x30, SP 
      000135 80 0D            [24]  549 	sjmp	00120$
      000137                        550 00102$:
      000137 85 81 31         [24]  551 	MOV 0x31, SP 
      00013A 80 08            [24]  552 	sjmp	00120$
      00013C                        553 00103$:
      00013C 85 81 32         [24]  554 	MOV 0x32, SP 
      00013F 80 03            [24]  555 	sjmp	00120$
      000141                        556 00104$:
      000141 85 81 33         [24]  557 	MOV 0x33, SP 
                                    558 ;	preemptive.c:290: do
      000144                        559 00120$:
                                    560 ;	preemptive.c:302: curThreadID = (curThreadID == '3') ? '0' : curThreadID + 1;
      000144 74 33            [12]  561 	mov	a,#0x33
      000146 B5 21 04         [24]  562 	cjne	a,_curThreadID,00131$
      000149 7E 30            [12]  563 	mov	r6,#0x30
      00014B 80 08            [24]  564 	sjmp	00132$
      00014D                        565 00131$:
      00014D AD 21            [24]  566 	mov	r5,_curThreadID
      00014F 0D               [12]  567 	inc	r5
      000150 ED               [12]  568 	mov	a,r5
      000151 FE               [12]  569 	mov	r6,a
      000152 33               [12]  570 	rlc	a
      000153 95 E0            [12]  571 	subb	a,acc
      000155                        572 00132$:
      000155 8E 21            [24]  573 	mov	_curThreadID,r6
                                    574 ;	preemptive.c:305: switch (curThreadID) {
      000157 AF 21            [24]  575 	mov	r7,_curThreadID
      000159 BF 30 02         [24]  576 	cjne	r7,#0x30,00242$
      00015C 80 0F            [24]  577 	sjmp	00107$
      00015E                        578 00242$:
      00015E BF 31 02         [24]  579 	cjne	r7,#0x31,00243$
      000161 80 1B            [24]  580 	sjmp	00110$
      000163                        581 00243$:
      000163 BF 32 02         [24]  582 	cjne	r7,#0x32,00244$
      000166 80 27            [24]  583 	sjmp	00113$
      000168                        584 00244$:
                                    585 ;	preemptive.c:306: case '0':
      000168 BF 33 49         [24]  586 	cjne	r7,#0x33,00122$
      00016B 80 33            [24]  587 	sjmp	00116$
      00016D                        588 00107$:
                                    589 ;	preemptive.c:307: if ((ValidBitMap & 0b0001) == 0b0001) {
      00016D 74 01            [12]  590 	mov	a,#0x01
      00016F 55 34            [12]  591 	anl	a,_ValidBitMap
      000171 FE               [12]  592 	mov	r6,a
      000172 E5 35            [12]  593 	mov	a,(_ValidBitMap + 1)
      000174 7F 00            [12]  594 	mov	r7,#0x00
      000176 BE 01 CB         [24]  595 	cjne	r6,#0x01,00120$
      000179 BF 00 C8         [24]  596 	cjne	r7,#0x00,00120$
                                    597 ;	preemptive.c:308: break; // Exit loop if thread 0 is runnable
                                    598 ;	preemptive.c:311: case '1':
      00017C 80 36            [24]  599 	sjmp	00122$
      00017E                        600 00110$:
                                    601 ;	preemptive.c:312: if ((ValidBitMap & 0b0010) == 0b0010) {
      00017E 74 02            [12]  602 	mov	a,#0x02
      000180 55 34            [12]  603 	anl	a,_ValidBitMap
      000182 FE               [12]  604 	mov	r6,a
      000183 E5 35            [12]  605 	mov	a,(_ValidBitMap + 1)
      000185 7F 00            [12]  606 	mov	r7,#0x00
      000187 BE 02 BA         [24]  607 	cjne	r6,#0x02,00120$
      00018A BF 00 B7         [24]  608 	cjne	r7,#0x00,00120$
                                    609 ;	preemptive.c:313: break; // Exit loop if thread 1 is runnable
                                    610 ;	preemptive.c:316: case '2':
      00018D 80 25            [24]  611 	sjmp	00122$
      00018F                        612 00113$:
                                    613 ;	preemptive.c:317: if ((ValidBitMap & 0b0100) == 0b0100) {
      00018F 74 04            [12]  614 	mov	a,#0x04
      000191 55 34            [12]  615 	anl	a,_ValidBitMap
      000193 FE               [12]  616 	mov	r6,a
      000194 E5 35            [12]  617 	mov	a,(_ValidBitMap + 1)
      000196 7F 00            [12]  618 	mov	r7,#0x00
      000198 BE 04 A9         [24]  619 	cjne	r6,#0x04,00120$
      00019B BF 00 A6         [24]  620 	cjne	r7,#0x00,00120$
                                    621 ;	preemptive.c:318: break; // Exit loop if thread 2 is runnable
                                    622 ;	preemptive.c:321: case '3':
      00019E 80 14            [24]  623 	sjmp	00122$
      0001A0                        624 00116$:
                                    625 ;	preemptive.c:322: if ((ValidBitMap & 0b1000) == 0b1000) {
      0001A0 74 08            [12]  626 	mov	a,#0x08
      0001A2 55 34            [12]  627 	anl	a,_ValidBitMap
      0001A4 FE               [12]  628 	mov	r6,a
      0001A5 E5 35            [12]  629 	mov	a,(_ValidBitMap + 1)
      0001A7 7F 00            [12]  630 	mov	r7,#0x00
      0001A9 BE 08 05         [24]  631 	cjne	r6,#0x08,00252$
      0001AC BF 00 02         [24]  632 	cjne	r7,#0x00,00252$
      0001AF 80 03            [24]  633 	sjmp	00253$
      0001B1                        634 00252$:
      0001B1 02r01r44         [24]  635 	ljmp	00120$
      0001B4                        636 00253$:
                                    637 ;	preemptive.c:329: } while (1);
      0001B4                        638 00122$:
                                    639 ;	preemptive.c:330: RESTORESTATE;
      0001B4 AF 21            [24]  640 	mov	r7,_curThreadID
      0001B6 BF 30 02         [24]  641 	cjne	r7,#0x30,00254$
      0001B9 80 0F            [24]  642 	sjmp	00123$
      0001BB                        643 00254$:
      0001BB BF 31 02         [24]  644 	cjne	r7,#0x31,00255$
      0001BE 80 0F            [24]  645 	sjmp	00124$
      0001C0                        646 00255$:
      0001C0 BF 32 02         [24]  647 	cjne	r7,#0x32,00256$
      0001C3 80 0F            [24]  648 	sjmp	00125$
      0001C5                        649 00256$:
      0001C5 BF 33 14         [24]  650 	cjne	r7,#0x33,00128$
      0001C8 80 0F            [24]  651 	sjmp	00126$
      0001CA                        652 00123$:
      0001CA 85 30 81         [24]  653 	mov	_SP,_Pointer
      0001CD 80 0D            [24]  654 	sjmp	00128$
      0001CF                        655 00124$:
      0001CF 85 31 81         [24]  656 	mov	_SP,(_Pointer + 0x0001)
      0001D2 80 08            [24]  657 	sjmp	00128$
      0001D4                        658 00125$:
      0001D4 85 32 81         [24]  659 	mov	_SP,(_Pointer + 0x0002)
      0001D7 80 03            [24]  660 	sjmp	00128$
      0001D9                        661 00126$:
      0001D9 85 33 81         [24]  662 	mov	_SP,(_Pointer + 0x0003)
      0001DC                        663 00128$:
      0001DC D0 D0            [24]  664 	POP PSW 
      0001DE D0 83            [24]  665 	POP DPH 
      0001E0 D0 82            [24]  666 	POP DPL 
      0001E2 D0 F0            [24]  667 	POP B 
      0001E4 D0 E0            [24]  668 	POP ACC 
                                    669 ;	preemptive.c:331: }
      0001E6 D0 D0            [24]  670 	pop	psw
      0001E8 92 AF            [24]  671 	mov	ea,c
      0001EA 22               [24]  672 	ret
                                    673 ;------------------------------------------------------------
                                    674 ;Allocation info for local variables in function 'ThreadExit'
                                    675 ;------------------------------------------------------------
                                    676 ;	preemptive.c:338: void ThreadExit(void)
                                    677 ;	-----------------------------------------
                                    678 ;	 function ThreadExit
                                    679 ;	-----------------------------------------
      0001EB                        680 _ThreadExit:
      0001EB D3               [12]  681 	setb	c
      0001EC 10 AF 01         [24]  682 	jbc	ea,00236$
      0001EF C3               [12]  683 	clr	c
      0001F0                        684 00236$:
      0001F0 C0 D0            [24]  685 	push	psw
                                    686 ;	preemptive.c:346: switch (curThreadID) {
      0001F2 AF 21            [24]  687 	mov	r7,_curThreadID
      0001F4 BF 30 02         [24]  688 	cjne	r7,#0x30,00237$
      0001F7 80 0F            [24]  689 	sjmp	00101$
      0001F9                        690 00237$:
      0001F9 BF 31 02         [24]  691 	cjne	r7,#0x31,00238$
      0001FC 80 12            [24]  692 	sjmp	00102$
      0001FE                        693 00238$:
      0001FE BF 32 02         [24]  694 	cjne	r7,#0x32,00239$
      000201 80 15            [24]  695 	sjmp	00103$
      000203                        696 00239$:
                                    697 ;	preemptive.c:347: case '0':
      000203 BF 33 22         [24]  698 	cjne	r7,#0x33,00105$
      000206 80 18            [24]  699 	sjmp	00104$
      000208                        700 00101$:
                                    701 ;	preemptive.c:348: ValidBitMap &= 0b1110; // Clear bit 0
      000208 53 34 0E         [24]  702 	anl	_ValidBitMap,#0x0e
      00020B 75 35 00         [24]  703 	mov	(_ValidBitMap + 1),#0x00
                                    704 ;	preemptive.c:349: break;
                                    705 ;	preemptive.c:350: case '1':
      00020E 80 1B            [24]  706 	sjmp	00121$
      000210                        707 00102$:
                                    708 ;	preemptive.c:351: ValidBitMap &= 0b1101; // Clear bit 1
      000210 53 34 0D         [24]  709 	anl	_ValidBitMap,#0x0d
      000213 75 35 00         [24]  710 	mov	(_ValidBitMap + 1),#0x00
                                    711 ;	preemptive.c:352: break;
                                    712 ;	preemptive.c:353: case '2':
      000216 80 13            [24]  713 	sjmp	00121$
      000218                        714 00103$:
                                    715 ;	preemptive.c:354: ValidBitMap &= 0b1011; // Clear bit 2
      000218 53 34 0B         [24]  716 	anl	_ValidBitMap,#0x0b
      00021B 75 35 00         [24]  717 	mov	(_ValidBitMap + 1),#0x00
                                    718 ;	preemptive.c:355: break;
                                    719 ;	preemptive.c:356: case '3':
      00021E 80 0B            [24]  720 	sjmp	00121$
      000220                        721 00104$:
                                    722 ;	preemptive.c:357: ValidBitMap &= 0b0111; // Clear bit 3
      000220 53 34 07         [24]  723 	anl	_ValidBitMap,#0x07
      000223 75 35 00         [24]  724 	mov	(_ValidBitMap + 1),#0x00
                                    725 ;	preemptive.c:358: break;
                                    726 ;	preemptive.c:359: default:
      000226 80 03            [24]  727 	sjmp	00121$
      000228                        728 00105$:
                                    729 ;	preemptive.c:360: return;
      000228 02r02rCD         [24]  730 	ljmp	00130$
                                    731 ;	preemptive.c:363: do {
      00022B                        732 00121$:
                                    733 ;	preemptive.c:364: curThreadID = (curThreadID == '3') ? '0' : curThreadID + 1;
      00022B 74 33            [12]  734 	mov	a,#0x33
      00022D B5 21 04         [24]  735 	cjne	a,_curThreadID,00132$
      000230 7E 30            [12]  736 	mov	r6,#0x30
      000232 80 08            [24]  737 	sjmp	00133$
      000234                        738 00132$:
      000234 AD 21            [24]  739 	mov	r5,_curThreadID
      000236 0D               [12]  740 	inc	r5
      000237 ED               [12]  741 	mov	a,r5
      000238 FE               [12]  742 	mov	r6,a
      000239 33               [12]  743 	rlc	a
      00023A 95 E0            [12]  744 	subb	a,acc
      00023C                        745 00133$:
      00023C 8E 21            [24]  746 	mov	_curThreadID,r6
                                    747 ;	preemptive.c:366: switch (curThreadID) {
      00023E AF 21            [24]  748 	mov	r7,_curThreadID
      000240 BF 30 02         [24]  749 	cjne	r7,#0x30,00243$
      000243 80 0F            [24]  750 	sjmp	00107$
      000245                        751 00243$:
      000245 BF 31 02         [24]  752 	cjne	r7,#0x31,00244$
      000248 80 1B            [24]  753 	sjmp	00110$
      00024A                        754 00244$:
      00024A BF 32 02         [24]  755 	cjne	r7,#0x32,00245$
      00024D 80 27            [24]  756 	sjmp	00113$
      00024F                        757 00245$:
                                    758 ;	preemptive.c:367: case '0':
      00024F BF 33 49         [24]  759 	cjne	r7,#0x33,00123$
      000252 80 33            [24]  760 	sjmp	00116$
      000254                        761 00107$:
                                    762 ;	preemptive.c:368: if ((ValidBitMap & 0b0001) == 0b0001) {
      000254 74 01            [12]  763 	mov	a,#0x01
      000256 55 34            [12]  764 	anl	a,_ValidBitMap
      000258 FE               [12]  765 	mov	r6,a
      000259 E5 35            [12]  766 	mov	a,(_ValidBitMap + 1)
      00025B 7F 00            [12]  767 	mov	r7,#0x00
      00025D BE 01 CB         [24]  768 	cjne	r6,#0x01,00121$
      000260 BF 00 C8         [24]  769 	cjne	r7,#0x00,00121$
                                    770 ;	preemptive.c:369: break; // Exit loop if thread 0 is valid
                                    771 ;	preemptive.c:372: case '1':
      000263 80 36            [24]  772 	sjmp	00123$
      000265                        773 00110$:
                                    774 ;	preemptive.c:373: if ((ValidBitMap & 0b0010) == 0b0010) {
      000265 74 02            [12]  775 	mov	a,#0x02
      000267 55 34            [12]  776 	anl	a,_ValidBitMap
      000269 FE               [12]  777 	mov	r6,a
      00026A E5 35            [12]  778 	mov	a,(_ValidBitMap + 1)
      00026C 7F 00            [12]  779 	mov	r7,#0x00
      00026E BE 02 BA         [24]  780 	cjne	r6,#0x02,00121$
      000271 BF 00 B7         [24]  781 	cjne	r7,#0x00,00121$
                                    782 ;	preemptive.c:374: break; // Exit loop if thread 1 is valid
                                    783 ;	preemptive.c:377: case '2':
      000274 80 25            [24]  784 	sjmp	00123$
      000276                        785 00113$:
                                    786 ;	preemptive.c:378: if ((ValidBitMap & 0b0100) == 0b0100) {
      000276 74 04            [12]  787 	mov	a,#0x04
      000278 55 34            [12]  788 	anl	a,_ValidBitMap
      00027A FE               [12]  789 	mov	r6,a
      00027B E5 35            [12]  790 	mov	a,(_ValidBitMap + 1)
      00027D 7F 00            [12]  791 	mov	r7,#0x00
      00027F BE 04 A9         [24]  792 	cjne	r6,#0x04,00121$
      000282 BF 00 A6         [24]  793 	cjne	r7,#0x00,00121$
                                    794 ;	preemptive.c:379: break; // Exit loop if thread 2 is valid
                                    795 ;	preemptive.c:382: case '3':
      000285 80 14            [24]  796 	sjmp	00123$
      000287                        797 00116$:
                                    798 ;	preemptive.c:383: if ((ValidBitMap & 0b1000) == 0b1000) {
      000287 74 08            [12]  799 	mov	a,#0x08
      000289 55 34            [12]  800 	anl	a,_ValidBitMap
      00028B FE               [12]  801 	mov	r6,a
      00028C E5 35            [12]  802 	mov	a,(_ValidBitMap + 1)
      00028E 7F 00            [12]  803 	mov	r7,#0x00
      000290 BE 08 05         [24]  804 	cjne	r6,#0x08,00253$
      000293 BF 00 02         [24]  805 	cjne	r7,#0x00,00253$
      000296 80 03            [24]  806 	sjmp	00254$
      000298                        807 00253$:
      000298 02r02r2B         [24]  808 	ljmp	00121$
      00029B                        809 00254$:
                                    810 ;	preemptive.c:391: } while (1);
      00029B                        811 00123$:
                                    812 ;	preemptive.c:393: RESTORESTATE;
      00029B AF 21            [24]  813 	mov	r7,_curThreadID
      00029D BF 30 02         [24]  814 	cjne	r7,#0x30,00255$
      0002A0 80 0F            [24]  815 	sjmp	00124$
      0002A2                        816 00255$:
      0002A2 BF 31 02         [24]  817 	cjne	r7,#0x31,00256$
      0002A5 80 0F            [24]  818 	sjmp	00125$
      0002A7                        819 00256$:
      0002A7 BF 32 02         [24]  820 	cjne	r7,#0x32,00257$
      0002AA 80 0F            [24]  821 	sjmp	00126$
      0002AC                        822 00257$:
      0002AC BF 33 14         [24]  823 	cjne	r7,#0x33,00129$
      0002AF 80 0F            [24]  824 	sjmp	00127$
      0002B1                        825 00124$:
      0002B1 85 30 81         [24]  826 	mov	_SP,_Pointer
      0002B4 80 0D            [24]  827 	sjmp	00129$
      0002B6                        828 00125$:
      0002B6 85 31 81         [24]  829 	mov	_SP,(_Pointer + 0x0001)
      0002B9 80 08            [24]  830 	sjmp	00129$
      0002BB                        831 00126$:
      0002BB 85 32 81         [24]  832 	mov	_SP,(_Pointer + 0x0002)
      0002BE 80 03            [24]  833 	sjmp	00129$
      0002C0                        834 00127$:
      0002C0 85 33 81         [24]  835 	mov	_SP,(_Pointer + 0x0003)
      0002C3                        836 00129$:
      0002C3 D0 D0            [24]  837 	POP PSW 
      0002C5 D0 83            [24]  838 	POP DPH 
      0002C7 D0 82            [24]  839 	POP DPL 
      0002C9 D0 F0            [24]  840 	POP B 
      0002CB D0 E0            [24]  841 	POP ACC 
      0002CD                        842 00130$:
                                    843 ;	preemptive.c:394: }
      0002CD D0 D0            [24]  844 	pop	psw
      0002CF 92 AF            [24]  845 	mov	ea,c
      0002D1 22               [24]  846 	ret
                                    847 ;------------------------------------------------------------
                                    848 ;Allocation info for local variables in function 'myTimer0Handler'
                                    849 ;------------------------------------------------------------
                                    850 ;	preemptive.c:396: void myTimer0Handler(void){
                                    851 ;	-----------------------------------------
                                    852 ;	 function myTimer0Handler
                                    853 ;	-----------------------------------------
      0002D2                        854 _myTimer0Handler:
                                    855 ;	preemptive.c:397: EA = 0;
                                    856 ;	assignBit
      0002D2 C2 AF            [12]  857 	clr	_EA
                                    858 ;	preemptive.c:398: SAVESTATE;
      0002D4 C0 E0            [24]  859 	PUSH ACC 
      0002D6 C0 F0            [24]  860 	PUSH B 
      0002D8 C0 82            [24]  861 	PUSH DPL 
      0002DA C0 83            [24]  862 	PUSH DPH 
      0002DC C0 D0            [24]  863 	PUSH PSW 
      0002DE AF 21            [24]  864 	mov	r7,_curThreadID
      0002E0 BF 30 02         [24]  865 	cjne	r7,#0x30,00244$
      0002E3 80 0F            [24]  866 	sjmp	00101$
      0002E5                        867 00244$:
      0002E5 BF 31 02         [24]  868 	cjne	r7,#0x31,00245$
      0002E8 80 0F            [24]  869 	sjmp	00102$
      0002EA                        870 00245$:
      0002EA BF 32 02         [24]  871 	cjne	r7,#0x32,00246$
      0002ED 80 0F            [24]  872 	sjmp	00103$
      0002EF                        873 00246$:
      0002EF BF 33 14         [24]  874 	cjne	r7,#0x33,00125$
      0002F2 80 0F            [24]  875 	sjmp	00104$
      0002F4                        876 00101$:
      0002F4 85 81 30         [24]  877 	MOV 0x30, SP 
      0002F7 80 0D            [24]  878 	sjmp	00125$
      0002F9                        879 00102$:
      0002F9 85 81 31         [24]  880 	MOV 0x31, SP 
      0002FC 80 08            [24]  881 	sjmp	00125$
      0002FE                        882 00103$:
      0002FE 85 81 32         [24]  883 	MOV 0x32, SP 
      000301 80 03            [24]  884 	sjmp	00125$
      000303                        885 00104$:
      000303 85 81 33         [24]  886 	MOV 0x33, SP 
                                    887 ;	preemptive.c:399: do{
      000306                        888 00125$:
                                    889 ;	preemptive.c:401: if (curThreadID != '0') {
      000306 74 30            [12]  890 	mov	a,#0x30
      000308 B5 21 02         [24]  891 	cjne	a,_curThreadID,00248$
      00030B 80 05            [24]  892 	sjmp	00110$
      00030D                        893 00248$:
                                    894 ;	preemptive.c:403: curThreadID = '0';
      00030D 75 21 30         [24]  895 	mov	_curThreadID,#0x30
      000310 80 10            [24]  896 	sjmp	00111$
      000312                        897 00110$:
                                    898 ;	preemptive.c:408: curThreadID = ProdThreadID;
      000312 85 28 21         [24]  899 	mov	_curThreadID,_ProdThreadID
                                    900 ;	preemptive.c:409: ProdThreadID += 1;
      000315 E5 28            [12]  901 	mov	a,_ProdThreadID
      000317 04               [12]  902 	inc	a
      000318 F5 28            [12]  903 	mov	_ProdThreadID,a
                                    904 ;	preemptive.c:410: if (ProdThreadID == '3') {
      00031A 74 33            [12]  905 	mov	a,#0x33
      00031C B5 28 03         [24]  906 	cjne	a,_ProdThreadID,00111$
                                    907 ;	preemptive.c:411: ProdThreadID = '1';
      00031F 75 28 31         [24]  908 	mov	_ProdThreadID,#0x31
      000322                        909 00111$:
                                    910 ;	preemptive.c:415: switch (curThreadID) {
      000322 AF 21            [24]  911 	mov	r7,_curThreadID
      000324 BF 30 02         [24]  912 	cjne	r7,#0x30,00251$
      000327 80 0F            [24]  913 	sjmp	00112$
      000329                        914 00251$:
      000329 BF 31 02         [24]  915 	cjne	r7,#0x31,00252$
      00032C 80 1B            [24]  916 	sjmp	00115$
      00032E                        917 00252$:
      00032E BF 32 02         [24]  918 	cjne	r7,#0x32,00253$
      000331 80 27            [24]  919 	sjmp	00118$
      000333                        920 00253$:
                                    921 ;	preemptive.c:416: case '0':
      000333 BF 33 49         [24]  922 	cjne	r7,#0x33,00127$
      000336 80 33            [24]  923 	sjmp	00121$
      000338                        924 00112$:
                                    925 ;	preemptive.c:417: if ((ValidBitMap & 0b0001) == 0b0001) break;
      000338 74 01            [12]  926 	mov	a,#0x01
      00033A 55 34            [12]  927 	anl	a,_ValidBitMap
      00033C FE               [12]  928 	mov	r6,a
      00033D E5 35            [12]  929 	mov	a,(_ValidBitMap + 1)
      00033F 7F 00            [12]  930 	mov	r7,#0x00
      000341 BE 01 C2         [24]  931 	cjne	r6,#0x01,00125$
      000344 BF 00 BF         [24]  932 	cjne	r7,#0x00,00125$
                                    933 ;	preemptive.c:419: case '1':
      000347 80 36            [24]  934 	sjmp	00127$
      000349                        935 00115$:
                                    936 ;	preemptive.c:420: if ((ValidBitMap & 0b0010) == 0b0010) break;
      000349 74 02            [12]  937 	mov	a,#0x02
      00034B 55 34            [12]  938 	anl	a,_ValidBitMap
      00034D FE               [12]  939 	mov	r6,a
      00034E E5 35            [12]  940 	mov	a,(_ValidBitMap + 1)
      000350 7F 00            [12]  941 	mov	r7,#0x00
      000352 BE 02 B1         [24]  942 	cjne	r6,#0x02,00125$
      000355 BF 00 AE         [24]  943 	cjne	r7,#0x00,00125$
                                    944 ;	preemptive.c:422: case '2':
      000358 80 25            [24]  945 	sjmp	00127$
      00035A                        946 00118$:
                                    947 ;	preemptive.c:423: if ((ValidBitMap & 0b0100) == 0b0100) break;
      00035A 74 04            [12]  948 	mov	a,#0x04
      00035C 55 34            [12]  949 	anl	a,_ValidBitMap
      00035E FE               [12]  950 	mov	r6,a
      00035F E5 35            [12]  951 	mov	a,(_ValidBitMap + 1)
      000361 7F 00            [12]  952 	mov	r7,#0x00
      000363 BE 04 A0         [24]  953 	cjne	r6,#0x04,00125$
      000366 BF 00 9D         [24]  954 	cjne	r7,#0x00,00125$
                                    955 ;	preemptive.c:425: case '3':
      000369 80 14            [24]  956 	sjmp	00127$
      00036B                        957 00121$:
                                    958 ;	preemptive.c:426: if ((ValidBitMap & 0b1000) == 0b1000) break;
      00036B 74 08            [12]  959 	mov	a,#0x08
      00036D 55 34            [12]  960 	anl	a,_ValidBitMap
      00036F FE               [12]  961 	mov	r6,a
      000370 E5 35            [12]  962 	mov	a,(_ValidBitMap + 1)
      000372 7F 00            [12]  963 	mov	r7,#0x00
      000374 BE 08 05         [24]  964 	cjne	r6,#0x08,00261$
      000377 BF 00 02         [24]  965 	cjne	r7,#0x00,00261$
      00037A 80 03            [24]  966 	sjmp	00262$
      00037C                        967 00261$:
      00037C 02r03r06         [24]  968 	ljmp	00125$
      00037F                        969 00262$:
                                    970 ;	preemptive.c:430: } while (1);
      00037F                        971 00127$:
                                    972 ;	preemptive.c:431: RESTORESTATE;
      00037F AF 21            [24]  973 	mov	r7,_curThreadID
      000381 BF 30 02         [24]  974 	cjne	r7,#0x30,00263$
      000384 80 0F            [24]  975 	sjmp	00128$
      000386                        976 00263$:
      000386 BF 31 02         [24]  977 	cjne	r7,#0x31,00264$
      000389 80 0F            [24]  978 	sjmp	00129$
      00038B                        979 00264$:
      00038B BF 32 02         [24]  980 	cjne	r7,#0x32,00265$
      00038E 80 0F            [24]  981 	sjmp	00130$
      000390                        982 00265$:
      000390 BF 33 14         [24]  983 	cjne	r7,#0x33,00133$
      000393 80 0F            [24]  984 	sjmp	00131$
      000395                        985 00128$:
      000395 85 30 81         [24]  986 	mov	_SP,_Pointer
      000398 80 0D            [24]  987 	sjmp	00133$
      00039A                        988 00129$:
      00039A 85 31 81         [24]  989 	mov	_SP,(_Pointer + 0x0001)
      00039D 80 08            [24]  990 	sjmp	00133$
      00039F                        991 00130$:
      00039F 85 32 81         [24]  992 	mov	_SP,(_Pointer + 0x0002)
      0003A2 80 03            [24]  993 	sjmp	00133$
      0003A4                        994 00131$:
      0003A4 85 33 81         [24]  995 	mov	_SP,(_Pointer + 0x0003)
      0003A7                        996 00133$:
      0003A7 D0 D0            [24]  997 	POP PSW 
      0003A9 D0 83            [24]  998 	POP DPH 
      0003AB D0 82            [24]  999 	POP DPL 
      0003AD D0 F0            [24] 1000 	POP B 
      0003AF D0 E0            [24] 1001 	POP ACC 
                                   1002 ;	preemptive.c:433: EA = 1;
                                   1003 ;	assignBit
      0003B1 D2 AF            [12] 1004 	setb	_EA
                                   1005 ;	preemptive.c:436: __endasm;
      0003B3 32               [24] 1006 	RETI
                                   1007 ;	preemptive.c:437: }
      0003B4 22               [24] 1008 	ret
                                   1009 	.area CSEG    (CODE)
                                   1010 	.area CONST   (CODE)
                                   1011 	.area XINIT   (CODE)
                                   1012 	.area CABS    (ABS,CODE)
